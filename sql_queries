-- ===========================================
-- 📚 Online Bookstore Database - SQL Practice
-- Author: Piyush Verma
-- Description: Sample SQL project for creating
--              an online bookstore schema, 
--              importing sample data, and 
--              performing analytical queries.
-- ===========================================

-- 1️⃣ Create a new database
CREATE DATABASE BookstoreDB;

-- Switch to the new database (PostgreSQL syntax)
\c BookstoreDB;

-- 2️⃣ Remove old tables if they exist
DROP TABLE IF EXISTS tbl_books;
DROP TABLE IF EXISTS tbl_customers;
DROP TABLE IF EXISTS tbl_orders;

-- 3️⃣ Create table: Books
CREATE TABLE tbl_books (
    id SERIAL PRIMARY KEY,
    title VARCHAR(120),
    author_name VARCHAR(100),
    category VARCHAR(60),
    year_published INT,
    unit_price NUMERIC(10, 2),
    stock_count INT
);

-- 4️⃣ Create table: Customers
CREATE TABLE tbl_customers (
    id SERIAL PRIMARY KEY,
    full_name VARCHAR(100),
    email_address VARCHAR(120),
    contact_no VARCHAR(15),
    city VARCHAR(50),
    country VARCHAR(100)
);

-- 5️⃣ Create table: Orders
CREATE TABLE tbl_orders (
    id SERIAL PRIMARY KEY,
    customer_id INT REFERENCES tbl_customers(id),
    book_id INT REFERENCES tbl_books(id),
    order_date DATE,
    quantity INT,
    total_cost NUMERIC(10, 2)
);

-- 6️⃣ Optional: Check empty tables
SELECT * FROM tbl_books;
SELECT * FROM tbl_customers;
SELECT * FROM tbl_orders;

-- 7️⃣ Load sample data from CSV files
COPY tbl_books(id, title, author_name, category, year_published, unit_price, stock_count) 
FROM 'D:\SQL_Project\Books.csv' CSV HEADER;

COPY tbl_customers(id, full_name, email_address, contact_no, city, country) 
FROM 'D:\SQL_Project\Customers.csv' CSV HEADER;

COPY tbl_orders(id, customer_id, book_id, order_date, quantity, total_cost) 
FROM 'D:\SQL_Project\Orders.csv' CSV HEADER;

-- ===========================================
-- 📊 BASIC DATA QUERIES
-- ===========================================

-- 1. Fetch all books in the "Fiction" category
SELECT * FROM tbl_books WHERE category = 'Fiction';

-- 2. Get books released after 1950
SELECT * FROM tbl_books WHERE year_published > 1950;

-- 3. List all customers from Canada
SELECT * FROM tbl_customers WHERE country = 'Canada';

-- 4. Orders placed during November 2023
SELECT * FROM tbl_orders 
WHERE order_date BETWEEN '2023-11-01' AND '2023-11-30';

-- 5. Total stock available
SELECT SUM(stock_count) AS total_stock FROM tbl_books;

-- 6. Highest priced book
SELECT * FROM tbl_books 
ORDER BY unit_price DESC LIMIT 1;

-- 7. Orders with more than one copy
SELECT * FROM tbl_orders WHERE quantity > 1;

-- 8. Orders exceeding $20
SELECT * FROM tbl_orders WHERE total_cost > 20;

-- 9. All available book categories
SELECT DISTINCT category FROM tbl_books;

-- 10. Book with least stock
SELECT * FROM tbl_books 
ORDER BY stock_count ASC LIMIT 1;

-- 11. Total revenue from all orders
SELECT SUM(total_cost) AS revenue FROM tbl_orders;

-- ===========================================
-- 📈 ADVANCED DATA ANALYSIS
-- ===========================================

-- 1. Total books sold per category
SELECT b.category, SUM(o.quantity) AS total_sold
FROM tbl_orders o
JOIN tbl_books b ON o.book_id = b.id
GROUP BY b.category;

-- 2. Average price of Fantasy books
SELECT AVG(unit_price) AS avg_price
FROM tbl_books
WHERE category = 'Fantasy';

-- 3. Customers with at least 2 purchases
SELECT o.customer_id, c.full_name, COUNT(o.id) AS order_count
FROM tbl_orders o
JOIN tbl_customers c ON o.customer_id = c.id
GROUP BY o.customer_id, c.full_name
HAVING COUNT(o.id) >= 2;

-- 4. Most frequently purchased book
SELECT o.book_id, b.title, COUNT(o.id) AS order_count
FROM tbl_orders o
JOIN tbl_books b ON o.book_id = b.id
GROUP BY o.book_id, b.title
ORDER BY order_count DESC LIMIT 1;

-- 5. Top 3 costliest Fantasy books
SELECT * FROM tbl_books
WHERE category = 'Fantasy'
ORDER BY unit_price DESC LIMIT 3;

-- 6. Quantity sold per author
SELECT b.author_name, SUM(o.quantity) AS total_sold
FROM tbl_orders o
JOIN tbl_books b ON o.book_id = b.id
GROUP BY b.author_name;

-- 7. Cities where customers spent over $30
SELECT DISTINCT c.city
FROM tbl_orders o
JOIN tbl_customers c ON o.customer_id = c.id
WHERE o.total_cost > 30;

-- 8. Customer who spent the most
SELECT c.id, c.full_name, SUM(o.total_cost) AS total_spent
FROM tbl_orders o
JOIN tbl_customers c ON o.customer_id = c.id
GROUP BY c.id, c.full_name
ORDER BY total_spent DESC LIMIT 1;

-- 9. Remaining stock after fulfilling orders
SELECT b.id, b.title, b.stock_count, 
       COALESCE(SUM(o.quantity), 0) AS sold_qty,
       b.stock_count - COALESCE(SUM(o.quantity), 0) AS remaining_qty
FROM tbl_books b
LEFT JOIN tbl_orders o ON b.id = o.book_id
GROUP BY b.id
ORDER BY b.id;
